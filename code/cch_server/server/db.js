//db.js
//functions of databse-based

const sqlite3 = require('sqlite3').verbose();
const db = new sqlite3.Database('./database.db');

//Create 2 tables and 1 index
function initializeDatabase() {
  db.serialize(() => {
    /*Table location: saving data related to Area
    location - shows in the application as Area number
    devEUI - unique id for each ESP32 which is generated by Senet Website
    feeder_status - 0 for feeder closed 1 for its open
    last_open - latest time when the feeder was opened by the application
    */
    db.run(`CREATE TABLE IF NOT EXISTS location (
      loc INT PRIMARY KEY,
      devEUI TEXT,
      feeder_status INT,
      last_open DATETIME default NULL
    )`);

    /*Table daily_npk: saving data which is fowarded from Senet by TCP socket
    id - unique id for this table
    devEUI - unique id for each ESP32 which is generated by Senet Website
    date - date(year-month-day time) when the data was recieved
    N, P, K - value of npk level measured by NPK sensor, passing by socket
    */
    db.run(`CREATE TABLE IF NOT EXISTS daily_npk (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      devEUI TEXT,
      date DATETIME,
      N REAL,
      P REAL,
      K REAL
    )`);
  });

  //For reducing time to sort rows in daily_npk based on time-serial type data
  db.run('CREATE INDEX IF NOT EXISTS idx_date ON daily_npk (date)');
}

//Save needed data for experiment - information of location, daily_npk data for to check system is working well
function putDummyData() {

  const location_sql = `REPLACE INTO location (loc, devEUI, feeder_status) 
                  VALUES (1, '00250C0100002114', 0), (2, '00250C010000210C', 0), (3, '00250C0100002101', 0), (4, '00250C010000211D', 0), (5, '00250C010000211E', 0);`;
  const daily_npk_sql = `REPLACE INTO daily_npk (id, devEUI, date, N, P, K) VALUES
  (1, '00250C0100002114', '2023-12-11 14:53:00', 7, 10, 20), (2, '00250C010000210C', '2023-12-11 14:53:00', 21, 30, 69),
  (3, '00250C0100002101', '2023-12-11 14:53:00', 7, 10, 21), (4, '00250C010000211D', '2023-12-11 14:53:00', 38, 53, 106);
  `;

  db.run(location_sql, errorHandler);
  db.run(daily_npk_sql, errorHandler);

  function errorHandler(err) {
    if (err) {
      console.log(err.message);
    }
  }

  console.log("Dummy data updated Successfully");
}

//REFACTOR: modify the function name
//Find the latest date of accumulated data in daily_npk table
//Use that date as a condition to make query, which is retriving NPK level on that date from same table
function find_latest_date() {
  return new Promise ((resolve, reject) => {
    db.get(`
    SELECT daily_npk.date as npk_date FROM daily_npk ORDER BY DATE(daily_npk.date) DESC LIMIT 1;`, (err, row) => {
      if (err) {
        console.log(err)
      }
      
      resolve(`
      SELECT location.loc, daily_npk.date AS npk_date, MAX(daily_npk.N) AS N, MAX(daily_npk.P) AS P, MAX(daily_npk.K) AS K,
      location.feeder_status as feeder_status, location.last_open as last_open
      FROM daily_npk
      JOIN location ON location.devEUI = daily_npk.devEUI
      WHERE daily_npk.date LIKE '${row.npk_date.split(" ")[0]}%'
      GROUP BY location.loc;
    `)
    })
  })
}

//Update feeder_status "in table" location with API request
//feeder will be closed when signal in API is equal to 0, otherwise open
function update_feeder_signal(location, signal) {
  return new Promise((resolve, reject) => {
    const query = 
    `UPDATE location 
    SET feeder_status = ${signal}, 
    last_open = CASE WHEN ${signal} = 0 THEN last_open ELSE CURRENT_TIMESTAMP END
    WHERE location.loc = ${location}`;
    db.run(query, function(err) {
      if (err) {
        reject(console.log(err.message));
      }
      resolve(`signal of location ${location} is ${signal}`);
    })
  })
}

//This function is for testing
//Update last_open date with data in API request
function update_last_open(respond) {
  return new Promise((resolve, reject) => {
    const query = `
    UPDATE location SET feeder_status = ${respond.body.feeder_status}, last_open = ${respond.body.date} WHERE location.loc = ${respond.body.loc}`;

    db.run(query, function(err) {
      if(err) {
        reject(console.log(err));
      }
      resolve('successfully updated');
    })
  })
}

//This function is database part for POST/ putDailyNPK API
function insert_npk(respond) {
  return new Promise((resolve, reject) => {
    const devEUI = respond.body.devEUI;
    const date = respond.body.date;
    const N = respond.body.N;
    const P = respond.body.P;
    const K = respond.body.K;
    const query = `
      INSERT INTO daily_npk (devEUI, date, N, P, K)
      VALUES ('${devEUI}', '${date}', ${N}, ${P}, ${K});`;
    
    db.get(query, (err, row) => {
      if (err) {
        return console.log(err.message);
      }

      resolve('inserted data successfully');
    })

  });
};

module.exports = {initializeDatabase, putDummyData, db, update_feeder_signal, find_latest_date, update_last_open, insert_npk};

